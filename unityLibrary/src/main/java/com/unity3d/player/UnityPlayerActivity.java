// GENERATED BY UNITY. REMOVE THIS COMMENT TO PREVENT OVERWRITING WHEN EXPORTING AGAIN
package com.unity3d.player;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.PixelFormat;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.FrameLayout;

import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import java.util.ArrayList;

public class UnityPlayerActivity extends Activity implements IUnityPlayerLifecycleEvents
{
    protected UnityPlayer mUnityPlayer; // don't change the name of this variable; referenced from native code

    // Override this in your custom UnityPlayerActivity to tweak the command line arguments passed to the Unity Android Player
    // The command line arguments are passed as a string, separated by spaces
    // UnityPlayerActivity calls this from 'onCreate'
    // Supported: -force-gles20, -force-gles30, -force-gles31, -force-gles31aep, -force-gles32, -force-gles, -force-vulkan
    // See https://docs.unity3d.com/Manual/CommandLineArguments.html
    // @param cmdLine the current command line arguments, may be null
    // @return the modified command line string or null
    //Declare a FrameLayout object
    FrameLayout fl_forUnity;
    public static Context mContext;

    //Declare the buttons
    Button bt_save;
    Button bt_frame;
    Button bt_wheelset;
    Button bt_handlebar;
    Button bt_saddle;
    Button bt_groupset;
    protected String updateUnityCommandLineArguments(String cmdLine)
    {
        return cmdLine;
    }

    // Setup activity layout
    @Override protected void onCreate(Bundle savedInstanceState)
    {
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        super.onCreate(savedInstanceState);

        getWindow().setFormat(PixelFormat.RGBX_8888); // <--- This makes xperia play happy

        mUnityPlayer = new UnityPlayer(this);
        if (mUnityPlayer.getSettings ().getBoolean ("hide_status_bar", true))
        {
            setTheme(android.R.style.Theme_NoTitleBar_Fullscreen);
            getWindow ().setFlags (WindowManager.LayoutParams.FLAG_FULLSCREEN,
                    WindowManager.LayoutParams.FLAG_FULLSCREEN);
        }

        //setContentView(mUnityPlayer);
        //Set the content to main
        setContentView(R.layout.main);


        //Inflate the frame layout from XML
        this.fl_forUnity = (FrameLayout)findViewById(R.id.fl_forUnity);

        //Add the mUnityPlayer view to the FrameLayout, and set it to fill all the area available
        this.fl_forUnity.addView(mUnityPlayer.getView(),
                FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT);

        this.bt_save = (Button)this.findViewById(R.id.bt_save);
        this.bt_frame = (Button)this.findViewById(R.id.bt_frame);
        this.bt_wheelset = (Button)this.findViewById(R.id.bt_wheelset);
        this.bt_handlebar = (Button)this.findViewById(R.id.bt_handlebar);
        this.bt_saddle = (Button)this.findViewById(R.id.bt_saddle);
        this.bt_groupset = (Button)this.findViewById(R.id.bt_groupset);



        ArrayList<BikeData> list = new ArrayList<>();
        /*for (int i=0; i<100; i++) {
            list.add(String.format("TEXT %d", i)) ;
        }*/

        mContext=this;
        // 리사이클러뷰에 LinearLayoutManager 객체 지정.
        RecyclerView recyclerView = findViewById(R.id.recycler1) ;
        recyclerView.setLayoutManager(new LinearLayoutManager(this)) ;

        // 리사이클러뷰에 SimpleTextAdapter 객체 지정.
        SimpleTextAdapter adapter = new SimpleTextAdapter(list) ;
        recyclerView.setAdapter(adapter) ;



        this.bt_save.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                Intent intent = new Intent();
                intent.putExtra("name", "저장완료");
                UnityPlayerActivity.this.setResult(8080, intent);
                UnityPlayerActivity.this.finish();
                UnityPlayerActivity.this.onBackPressed();
            }
        });
        this.bt_frame.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                adapter.clear();
                adapter.addItem(new BikeData("프레임 1","1102"));
                adapter.addItem(new BikeData("프레임 2","1101"));
                adapter.notifyDataSetChanged();
            }
        });
        this.bt_wheelset.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                adapter.clear();
                adapter.addItem(new BikeData("휠셋 1","2101"));

                adapter.notifyDataSetChanged();
            }
        });
        this.bt_handlebar.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                adapter.clear();
                adapter.addItem(new BikeData("핸들바 1","3101"));
                adapter.notifyDataSetChanged();
            }
        });
        this.bt_saddle.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                adapter.clear();
                adapter.addItem(new BikeData("안장 1","4101"));
                adapter.notifyDataSetChanged();
            }
        });
        this.bt_groupset.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                adapter.clear();
                adapter.addItem(new BikeData("구동계 1","5101"));
                adapter.notifyDataSetChanged();
            }
        });

        mUnityPlayer.requestFocus();

    }

    void SendToUnity(String string){
        UnityPlayer.UnitySendMessage("GameManager", "Show", string);
    }
    // When Unity player unloaded move task to background
    @Override public void onUnityPlayerUnloaded() {
        moveTaskToBack(true);
    }

    // Callback before Unity player process is killed
    @Override public void onUnityPlayerQuitted() {
    }



    // Quit Unity
    @Override protected void onDestroy ()
    {
        mUnityPlayer.destroy();
        super.onDestroy();
    }

    // Pause Unity
    @Override protected void onPause()
    {
        super.onPause();
        mUnityPlayer.pause();
    }

    // Resume Unity
    @Override protected void onResume()
    {
        super.onResume();
        mUnityPlayer.resume();
    }

    // Low Memory Unity
    @Override public void onLowMemory()
    {
        super.onLowMemory();
        mUnityPlayer.lowMemory();
    }

    // Trim Memory Unity
    @Override public void onTrimMemory(int level)
    {
        super.onTrimMemory(level);
        if (level == TRIM_MEMORY_RUNNING_CRITICAL)
        {
            mUnityPlayer.lowMemory();
        }
    }

    // This ensures the layout will be correct.
    @Override public void onConfigurationChanged(Configuration newConfig)
    {
        super.onConfigurationChanged(newConfig);
        mUnityPlayer.configurationChanged(newConfig);
    }

    // Notify Unity of the focus change.
    @Override public void onWindowFocusChanged(boolean hasFocus)
    {
        super.onWindowFocusChanged(hasFocus);
        mUnityPlayer.windowFocusChanged(hasFocus);
    }

    // For some reason the multiple keyevent type is not supported by the ndk.
    // Force event injection by overriding dispatchKeyEvent().
    @Override public boolean dispatchKeyEvent(KeyEvent event)
    {
        if (event.getAction() == KeyEvent.ACTION_MULTIPLE)
            return mUnityPlayer.injectEvent(event);
        return super.dispatchKeyEvent(event);
    }

    // Pass any events not handled by (unfocused) views straight to UnityPlayer
    @Override public boolean onKeyUp(int keyCode, KeyEvent event)     { return mUnityPlayer.injectEvent(event); }
    @Override public boolean onTouchEvent(MotionEvent event)          { return mUnityPlayer.injectEvent(event); }
    /*API12*/ public boolean onGenericMotionEvent(MotionEvent event)  { return mUnityPlayer.injectEvent(event); }
    @Override public boolean onKeyDown(int keyCode, KeyEvent event)   {
        if ((keyCode == KeyEvent.KEYCODE_BACK)) {
            onBackPressed();
        }return mUnityPlayer.injectEvent(event);
    }
}
