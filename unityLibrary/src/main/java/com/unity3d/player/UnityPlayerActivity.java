// GENERATED BY UNITY. REMOVE THIS COMMENT TO PREVENT OVERWRITING WHEN EXPORTING AGAIN
package com.unity3d.player;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.PixelFormat;


import android.graphics.Rect;
import android.graphics.drawable.BitmapDrawable;
import android.hardware.Camera;

import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Looper;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.PixelCopy;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.annotation.RequiresApi;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.lang.reflect.Field;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import static android.provider.MediaStore.Files.FileColumns.MEDIA_TYPE_IMAGE;

public class UnityPlayerActivity extends Activity implements IUnityPlayerLifecycleEvents
{
    protected UnityPlayer mUnityPlayer; // don't change the name of this variable; referenced from native code
    FrameLayout fl_forUnity;
    public static Context mContext;
    public String[] cur_name=new String[5];
    public String[] cur_part=new String[5];
    public String[] cur_image=new String[5];
    //Declare the buttons
    Button bt_save;
    Button bt_frame;
    Button bt_wheelset;
    Button bt_handlebar;
    Button bt_saddle;
    Button bt_groupset;
    ImageView imageView;
    // Setup activity layout
    @Override protected void onCreate(Bundle savedInstanceState)
    {
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        super.onCreate(savedInstanceState);

        getWindow().setFormat(PixelFormat.RGBX_8888); // <--- This makes xperia play happy

        mUnityPlayer = new UnityPlayer(this);
        if (mUnityPlayer.getSettings ().getBoolean ("hide_status_bar", true))
        {
            setTheme(android.R.style.Theme_NoTitleBar_Fullscreen);
            getWindow ().setFlags (WindowManager.LayoutParams.FLAG_FULLSCREEN,
                    WindowManager.LayoutParams.FLAG_FULLSCREEN);
        }

        //setContentView(mUnityPlayer);
        //Set the content to main
        setContentView(R.layout.main);
        Intent intent=getIntent();
        ArrayList<String> frame_name = intent.getStringArrayListExtra("frame_name");
        ArrayList<String> frame_value = intent.getStringArrayListExtra("frame_value");
        ArrayList<String> frame_image = intent.getStringArrayListExtra("frame_image");
        ArrayList<String> wheelset_name = intent.getStringArrayListExtra("wheelset_name");
        ArrayList<String> wheelset_value = intent.getStringArrayListExtra("wheelset_value");
        ArrayList<String> wheelset_image = intent.getStringArrayListExtra("wheelset_image");
        ArrayList<String> handlebar_name = intent.getStringArrayListExtra("handlebar_name");
        ArrayList<String> handlebar_value = intent.getStringArrayListExtra("handlebar_value");
        ArrayList<String> handlebar_image = intent.getStringArrayListExtra("handlebar_image");
        ArrayList<String> saddle_name = intent.getStringArrayListExtra("saddle_name");
        ArrayList<String> saddle_value = intent.getStringArrayListExtra("saddle_value");
        ArrayList<String> saddle_image = intent.getStringArrayListExtra("saddle_image");
        ArrayList<String> groupset_name = intent.getStringArrayListExtra("groupset_name");
        ArrayList<String> groupset_value = intent.getStringArrayListExtra("groupset_value");
        ArrayList<String> groupset_image = intent.getStringArrayListExtra("groupset_image");

        //Inflate the frame layout from XML
        this.fl_forUnity = (FrameLayout)findViewById(R.id.fl_forUnity);

        //Add the mUnityPlayer view to the FrameLayout, and set it to fill all the area available
        this.fl_forUnity.addView(mUnityPlayer.getView(),
                FrameLayout.LayoutParams.MATCH_PARENT, FrameLayout.LayoutParams.MATCH_PARENT);

        this.bt_save = (Button)this.findViewById(R.id.bt_save);
        this.bt_frame = (Button)this.findViewById(R.id.bt_frame);
        this.bt_wheelset = (Button)this.findViewById(R.id.bt_wheelset);
        this.bt_handlebar = (Button)this.findViewById(R.id.bt_handlebar);
        this.bt_saddle = (Button)this.findViewById(R.id.bt_saddle);
        this.bt_groupset = (Button)this.findViewById(R.id.bt_groupset);

        ArrayList<BikeData> list = new ArrayList<>();

        mContext=this;
        // 리사이클러뷰에 LinearLayoutManager 객체 지정.
        RecyclerView recyclerView = findViewById(R.id.recycler1) ;
        recyclerView.setLayoutManager(new LinearLayoutManager(this)) ;

        // 리사이클러뷰에 SimpleTextAdapter 객체 지정.
        SimpleTextAdapter adapter = new SimpleTextAdapter(list) ;
        recyclerView.setAdapter(adapter) ;



        this.bt_save.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                Intent intent2 = new Intent(getApplicationContext(),PopupActivity.class);
                startActivityForResult(intent2,9090);
            }
        });
        this.bt_frame.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                adapter.clear();
                for(int i=0;i<frame_name.size();i++) {
                    adapter.addItem(new BikeData(frame_name.get((i)),frame_value.get(i),frame_image.get(i)));
                }
                adapter.notifyDataSetChanged();
                adapter.cur_state=0;
            }
        });
        this.bt_wheelset.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                adapter.clear();
                for(int i=0;i<wheelset_name.size();i++) {
                    adapter.addItem(new BikeData(wheelset_name.get((i)),wheelset_value.get(i),wheelset_image.get(i)));
                }
                adapter.notifyDataSetChanged();
                adapter.cur_state=1;
            }
        });
        this.bt_handlebar.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                adapter.clear();
                for(int i=0;i<handlebar_name.size();i++) {
                    adapter.addItem(new BikeData(handlebar_name.get((i)),handlebar_value.get(i),handlebar_image.get(i)));
                }
                adapter.notifyDataSetChanged();
                adapter.cur_state=2;
            }
        });
        this.bt_saddle.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                adapter.clear();
                for(int i=0;i<saddle_name.size();i++) {
                    adapter.addItem(new BikeData(saddle_name.get((i)),saddle_value.get(i),saddle_image.get(i)));
                }
                adapter.notifyDataSetChanged();
                adapter.cur_state=3;
            }
        });
        this.bt_groupset.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                adapter.clear();
                for(int i=0;i<groupset_name.size();i++) {
                    adapter.addItem(new BikeData(groupset_name.get((i)),groupset_value.get(i),groupset_image.get(i)));
                }
                adapter.notifyDataSetChanged();
                adapter.cur_state=4;
            }
        });

        mUnityPlayer.requestFocus();

        Button btn_capture=findViewById(R.id.bt_capture);
        btn_capture.setOnClickListener(new View.OnClickListener() {
            public void onClick(View view) {
                Bitmap bitmap = Bitmap.createBitmap(
                        1000,
                        1000
                        , Bitmap.Config.ARGB_8888
                );
                Canvas canvas = new Canvas(bitmap);
                mUnityPlayer.getView().draw(canvas);
                imageView=findViewById(R.id.imageView);
                imageView.setImageDrawable(new BitmapDrawable(getResources(), bitmap));

            }
        });
        mUnityPlayer.requestFocus();

    }



    void SendToUnity(String string){
        UnityPlayer.UnitySendMessage("GameManager", "Show", string);
    }


    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        if (requestCode == 9090 && resultCode == 9090) {
            String name = data.getStringExtra("result");
            UnityPlayer.UnitySendMessage("Main Camera", "Capture", "박기훈");
            Intent intent = new Intent();
            intent.putExtra("get_custom",name);
            intent.putExtra("name",cur_name);
            intent.putExtra("part",cur_part);
            intent.putExtra("image",cur_image);
            UnityPlayerActivity.this.setResult(8080, intent);
            UnityPlayerActivity.this.finish();
            UnityPlayerActivity.this.onBackPressed();
        }
    }
    // When Unity player unloaded move task to background
    @Override public void onUnityPlayerUnloaded() {
        moveTaskToBack(true);
    }

    // Callback before Unity player process is killed
    @Override public void onUnityPlayerQuitted() {
    }



    // Quit Unity
    @Override protected void onDestroy ()
    {
        mUnityPlayer.destroy();
        super.onDestroy();
    }

    // Pause Unity
    @Override protected void onPause()
    {
        super.onPause();
        mUnityPlayer.pause();
    }

    // Resume Unity
    @Override protected void onResume()
    {
        super.onResume();
        mUnityPlayer.resume();
    }

    // Low Memory Unity
    @Override public void onLowMemory()
    {
        super.onLowMemory();
        mUnityPlayer.lowMemory();
    }

    // Trim Memory Unity
    @Override public void onTrimMemory(int level)
    {
        super.onTrimMemory(level);
        if (level == TRIM_MEMORY_RUNNING_CRITICAL)
        {
            mUnityPlayer.lowMemory();
        }
    }

    // This ensures the layout will be correct.
    @Override public void onConfigurationChanged(Configuration newConfig)
    {
        super.onConfigurationChanged(newConfig);
        mUnityPlayer.configurationChanged(newConfig);
    }

    // Notify Unity of the focus change.
    @Override public void onWindowFocusChanged(boolean hasFocus)
    {
        super.onWindowFocusChanged(hasFocus);
        mUnityPlayer.windowFocusChanged(hasFocus);
    }

    // For some reason the multiple keyevent type is not supported by the ndk.
    // Force event injection by overriding dispatchKeyEvent().
    @Override public boolean dispatchKeyEvent(KeyEvent event)
    {
        if (event.getAction() == KeyEvent.ACTION_MULTIPLE)
            return mUnityPlayer.injectEvent(event);
        return super.dispatchKeyEvent(event);
    }

    // Pass any events not handled by (unfocused) views straight to UnityPlayer
    @Override public boolean onKeyUp(int keyCode, KeyEvent event)     { return mUnityPlayer.injectEvent(event); }
    @Override public boolean onTouchEvent(MotionEvent event)          { return mUnityPlayer.injectEvent(event); }
    /*API12*/ public boolean onGenericMotionEvent(MotionEvent event)  { return mUnityPlayer.injectEvent(event); }
    @Override public boolean onKeyDown(int keyCode, KeyEvent event)   {
        if ((keyCode == KeyEvent.KEYCODE_BACK)) {
            onBackPressed();
        }return mUnityPlayer.injectEvent(event);
    }
}
